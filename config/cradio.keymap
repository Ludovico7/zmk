// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    macros {
        tab_up: tab_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp UP_ARROW>,
                <&macro_release>,
                <&kp LCTRL>;

            label = "TAB_UP";
        };

        tab_left: tab_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp LCTRL>;

            label = "TAB_LEFT";
        };

        tab_right: tab_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LCTRL>;

            label = "TAB_RIGHT";
        };

        chrome_left: chrome_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp LEFT_ARROW>,
                <&macro_release>,
                <&kp LGUI &kp LALT>;

            label = "CHROME_LEFT";
        };

        chrome_right: chrome_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_press>,
                <&kp LGUI &kp LALT>;

            label = "CHROME_RIGHT";
        };

        terminate: terminate {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp C>,
                <&macro_release>,
                <&kp LCTRL>;

            label = "TERMINATE";
        };

        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp C>,
                <&macro_release>,
                <&kp LGUI>;

            label = "COPY";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp V>,
                <&macro_release>,
                <&kp LGUI>;

            label = "PASTE";
        };

        cut: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp X>,
                <&macro_release>,
                <&kp LGUI>;

            label = "CUT";
        };

        screenshot: screenshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp NUMBER_4>,
                <&macro_release>,
                <&kp LSHFT &kp LGUI>;

            label = "SCREENSHOT";
        };

        record: record {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp NUMBER_5>,
                <&macro_press>,
                <&kp LSHFT &kp LGUI>;

            label = "RECORD";
        };

        f5: f5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp R>,
                <&macro_release>,
                <&kp LGUI>;

            label = "F5";
        };

        chrome_new_tab: chrome_new_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp T>,
                <&macro_release>,
                <&kp LGUI>;

            label = "CHROME_NEW_TAB";
        };

        chrome_close: chrome_close {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp W>,
                <&macro_release>,
                <&kp LGUI>;

            label = "CHROME_CLOSE";
        };
    };

    combos {
        compatible = "zmk,combos";

        op_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
        };

        ll_enter {
            bindings = <&kp ENTER>;
            key-positions = <18 19>;
        };

        qw_tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
        };

        as_capslock {
            bindings = <&kp CLCK>;
            key-positions = <10 11>;
        };

        tri_layer {
            bindings = <&mo 3>;
            key-positions = <30 32>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T        &kp Y  &kp U       &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F  &kp G        &kp H  &kp J       &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C  &kp V  &kp B        &kp N  &kp M       &kp COMMA  &kp DOT  &kp FSLH
                     &mo 2  &kp SPACE    &mo 1  &kp LSHIFT
            >;
        };

        right_layer {
            bindings = <
&kp N1  &kp N2  &kp N3      &kp N4         &kp N5       &kp N6    &kp N7     &kp N8     &kp N9      &kp N0
&kp LT  &kp GT  &kp LPAR    &kp RPAR       &kp EQUAL    &kp PLUS  &kp LBRC   &kp RBRC   &kp LBKT    &kp RBKT
&trans  &trans  &terminate  &kp NUBS       &kp MINUS    &kp SQT   &kp GRAVE  &kp COMMA  &kp PERIOD  &kp RSHFT
                            &kp BACKSPACE  &kp SPACE    &trans    &trans
            >;
        };

        left_layer {
            bindings = <
&kp ESCAPE  &chrome_close   &kp UP_ARROW    &f5        &chrome_new_tab    &trans         &tab_left     &tab_up  &tab_right     &trans
&kp HOME    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &kp END            &trans         &chrome_left  &trans   &chrome_right  &trans
&terminate  &cut            &copy           &paste     &trans             &trans         &trans        &trans   &trans         &trans
                                            &trans     &trans             &kp BACKSPACE  &kp F12
            >;
        };

        tri_layer {
            bindings = <
&trans  &trans  &trans  &screenshot  &record    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans       &trans     &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans       &trans     &trans  &trans  &trans  &trans  &trans
                        &trans       &trans     &trans  &trans
            >;
        };
    };
};
