// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    macros {
        tab_up: tab_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp UP_ARROW>;
            label = "TAB_UP";
        };

        tab_left: tab_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp LEFT>;
            label = "TAB_LEFT";
        };

        tab_right: tab_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp RIGHT>;
            label = "TAB_RIGHT";
        };

        chrome_left: chrome_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LGUI &kp LALT &kp LEFT_ARROW>;
            label = "CHROME_LEFT";
        };

        chrome_right: chrome_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LGUI &kp LALT &kp RIGHT>;
            label = "CHROME_RIGHT";
        };

        terminate: terminate {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp C>;
            label = "TERMINATE";
        };

        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LGUI &kp C>;
            label = "COPY";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LGUI &kp V>;
            label = "PASTE";
        };

        cut: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LGUI &kp X>;
            label = "CUT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp E  &kp R      &kp T        &kp Y      &kp U       &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F      &kp G        &kp H      &kp J       &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C  &kp V      &kp B        &kp N      &kp M       &kp COMMA  &kp DOT  &kp FSLH
                     &mo right  &kp SPACE    &kp SPACE  &kp LSHIFT
            >;
        };

        right_layer {
            bindings = <
&kp N1      &kp N2  &kp N3    &kp N4         &kp N5       &kp N6    &kp N7     &kp N8     &kp N9      &kp N0
&kp LT      &kp GT  &kp LPAR  &kp RPAR       &kp EQUAL    &kp PLUS  &kp LBRC   &kp RBRC   &kp LBKT    &kp RBKT
&caps_word  &trans  &trans    &trans         &trans       &trans    &kp GRAVE  &kp COMMA  &kp PERIOD  &kp RSHFT
                              &kp BACKSPACE  &kp SPACE    &trans    &trans
            >;
        };

        left_layer {
            bindings = <
&trans    &trans          &kp UP_ARROW    &trans     &trans     &trans  &trans  &trans  &trans  &trans
&kp HOME  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &kp END    &trans  &trans  &trans  &trans  &trans
&trans    &trans          &trans          &trans     &trans     &trans  &trans  &trans  &trans  &trans
                                          &trans     &trans     &trans  &trans
            >;
        };

        tri_layer {
            bindings = <
&sys_reset   &trans  &trans  &trans      &bt BT_SEL 0    &trans  &trans  &trans  &trans  &sys_reset
&bootloader  &trans  &trans  &trans      &bt BT_SEL 1    &trans  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &bt BT_CLR  &bt BT_SEL 2    &trans  &trans  &trans  &trans  &trans
                             &trans      &trans          &trans  &trans
            >;
        };
    };
};
